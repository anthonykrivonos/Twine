{"version":3,"sources":["../../../src/@ionic-native/plugins/fcm/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,iBAAA,EAAmB,OAAA,EAAQ,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAkB7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AASH,IAAa,GAAG;IAAS,uBAAiB;IAA1C;;IA0DA,CAAC;IAxDC;;;;OAIG;IAEH,sBAAQ,GAAR,cAA8B,MAAM,CAAC,CAAC,CAAC;IAEvC;;;;OAIG;IAIH,4BAAc,GAAd,cAAuC,MAAM,CAAC,CAAC,CAAC;IAEhD;;;;;;OAMG;IAEH,8BAAgB,GAAhB,UAAiB,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEzD;;;;;;OAMG;IAEH,kCAAoB,GAApB,UAAqB,KAAa,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE7D;;;;OAIG;IAMH,4BAAc,GAAd,cAAiD,MAAM,CAAC,CAAC,CAAC;IAQ5D,UAAC;AAAD,CA1DA,AA0DC,CA1DwB,iBAAiB,GA0DzC;AANM,cAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjDA;IADC,OAAO,EAAE;;;;mCAC6B;AAUvC;IAHC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;KACjB,CAAC;;;oCACgB,UAAU;yCAAoB;AAUhD;IADC,OAAO,EAAE;;;;2CAC+C;AAUzD;IADC,OAAO,EAAE;;;;+CACmD;AAY7D;IALC,OAAO,CAAC;QACP,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;oCACgB,UAAU;yCAA8B;AAlD/C,GAAG;IARf,MAAM,CAAC;QACN,UAAU,EAAE,KAAK;QACjB,MAAM,EAAE,oBAAoB;QAC5B,SAAS,EAAE,WAAW;QACtB,IAAI,EAAE,kDAAkD;QACxD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,GAAG,CA0Df;SA1DY,GAAG","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, IonicNativePlugin, Cordova } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface NotificationData {\n\n  /**\n   * Determines whether the notification was pressed or not\n   */\n\n  wasTapped: boolean;\n\n  /**\n   * Notification data hash item\n   */\n\n  [name: string]: any;\n\n}\n\n/**\n * @name FCM\n * @description\n * Provides basic functionality for Firebase Cloud Messaging\n *\n * @usage\n * ```typescript\n * import { FCM } from '@ionic-native/fcm';\n *\n * constructor(private fcm: FCM) {}\n *\n * ...\n *\n * fcm.subscribeToTopic('marketing');\n *\n * fcm.getToken().then(token=>{\n *   backend.registerToken(token);\n * })\n *\n * fcm.onNotification().subscribe(data=>{\n *   if(data.wasTapped){\n *     console.log(\"Received in background\");\n *   } else {\n *     console.log(\"Received in foreground\");\n *   };\n * })\n *\n * fcm.onTokenRefresh().subscribe(token=>{\n *   backend.registerToken(token);\n * })\n *\n * fcm.unsubscribeFromTopic('marketing');\n *\n * ```\n * @interfaces\n * NotificationData\n */\n@Plugin({\n  pluginName: 'FCM',\n  plugin: 'cordova-plugin-fcm',\n  pluginRef: 'FCMPlugin',\n  repo: 'https://github.com/fechanique/cordova-plugin-fcm',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FCM extends IonicNativePlugin {\n\n  /**\n   * Get's device's current registration id\n   *\n   * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\n   */\n  @Cordova()\n  getToken(): Promise<string> { return; }\n\n  /**\n   * Event firing on the token refresh\n   *\n   * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\n   */\n  @Cordova({\n    observable: true\n  })\n  onTokenRefresh(): Observable<string> { return; }\n\n  /**\n   * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be subscribed to\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\n   */\n  @Cordova()\n  subscribeToTopic(topic: string): Promise<any> { return; }\n\n  /**\n   * Unubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n   *\n   * @param {string} topic Topic to be unsubscribed from\n   *\n   * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\n   */\n  @Cordova()\n  unsubscribeFromTopic(topic: string): Promise<any> { return; }\n\n  /**\n   * Watch for incoming notifications\n   *\n   * @returns {Observable<any>} returns an object with data from the notification\n   */\n  @Cordova({\n    observable: true,\n    successIndex: 0,\n    errorIndex: 2\n  })\n  onNotification(): Observable<NotificationData> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}