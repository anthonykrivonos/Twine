"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ElasticDirective = (function () {
    function ElasticDirective(element) {
        this.element = element;
    }
    ElasticDirective.prototype.isTextarea = function (el) {
        return el.tagName === 'TEXTAREA';
    };
    ElasticDirective.prototype.setupTextarea = function (textareaEl) {
        var _this = this;
        this.textareaEl = textareaEl;
        var style = this.textareaEl.style;
        style.overflow = 'hidden';
        style.resize = 'none';
        Rx_1.Observable.fromEvent(window, 'resize')
            .debounceTime(250)
            .distinctUntilChanged(function (evt) { return evt.timeStamp; })
            .subscribe(function () { return _this.adjust(); });
    };
    ElasticDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.isTextarea(this.element.nativeElement)) {
            this.setupTextarea(this.element.nativeElement);
            return;
        }
        var children = Array.from(this.element.nativeElement.children);
        var textareaEl = children.find(function (el) { return _this.isTextarea(el); });
        if (textareaEl) {
            this.setupTextarea(textareaEl);
            return;
        }
        throw new Error('The `elastic` attribute directive must be used on a `textarea` or an element that contains a `textarea`.');
    };
    ElasticDirective.prototype.onInput = function () {
        this.adjust();
    };
    ElasticDirective.prototype.ngAfterViewChecked = function () {
        this.adjust();
    };
    ElasticDirective.prototype.adjust = function () {
        this.textareaEl.style.height = 'auto';
        this.textareaEl.style.height = this.textareaEl.scrollHeight + "px";
    };
    return ElasticDirective;
}());
__decorate([
    core_1.HostListener('input'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ElasticDirective.prototype, "onInput", null);
ElasticDirective = __decorate([
    core_1.Directive({
        selector: '[fz-elastic]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], ElasticDirective);
exports.ElasticDirective = ElasticDirective;
